package com.aiep.evaluacion.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CentrosDeSaludAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCentrosDeSaludAllPropertiesEquals(CentrosDeSalud expected, CentrosDeSalud actual) {
        assertCentrosDeSaludAutoGeneratedPropertiesEquals(expected, actual);
        assertCentrosDeSaludAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCentrosDeSaludAllUpdatablePropertiesEquals(CentrosDeSalud expected, CentrosDeSalud actual) {
        assertCentrosDeSaludUpdatableFieldsEquals(expected, actual);
        assertCentrosDeSaludUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCentrosDeSaludAutoGeneratedPropertiesEquals(CentrosDeSalud expected, CentrosDeSalud actual) {
        assertThat(expected)
            .as("Verify CentrosDeSalud auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCentrosDeSaludUpdatableFieldsEquals(CentrosDeSalud expected, CentrosDeSalud actual) {
        assertThat(expected)
            .as("Verify CentrosDeSalud relevant properties")
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getTipo()).as("check tipo").isEqualTo(actual.getTipo()))
            .satisfies(e -> assertThat(e.getCiudad()).as("check ciudad").isEqualTo(actual.getCiudad()))
            .satisfies(e -> assertThat(e.getDireccion()).as("check direccion").isEqualTo(actual.getDireccion()))
            .satisfies(e -> assertThat(e.getTelefono()).as("check telefono").isEqualTo(actual.getTelefono()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCentrosDeSaludUpdatableRelationshipsEquals(CentrosDeSalud expected, CentrosDeSalud actual) {
        // empty method
    }
}
