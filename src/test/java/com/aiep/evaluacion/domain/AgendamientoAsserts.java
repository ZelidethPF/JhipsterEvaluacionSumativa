package com.aiep.evaluacion.domain;

import static com.aiep.evaluacion.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AgendamientoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgendamientoAllPropertiesEquals(Agendamiento expected, Agendamiento actual) {
        assertAgendamientoAutoGeneratedPropertiesEquals(expected, actual);
        assertAgendamientoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgendamientoAllUpdatablePropertiesEquals(Agendamiento expected, Agendamiento actual) {
        assertAgendamientoUpdatableFieldsEquals(expected, actual);
        assertAgendamientoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgendamientoAutoGeneratedPropertiesEquals(Agendamiento expected, Agendamiento actual) {
        assertThat(expected)
            .as("Verify Agendamiento auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgendamientoUpdatableFieldsEquals(Agendamiento expected, Agendamiento actual) {
        assertThat(expected)
            .as("Verify Agendamiento relevant properties")
            .satisfies(e -> assertThat(e.getPaciente()).as("check paciente").isEqualTo(actual.getPaciente()))
            .satisfies(e -> assertThat(e.getMedico()).as("check medico").isEqualTo(actual.getMedico()))
            .satisfies(e -> assertThat(e.getCentro()).as("check centro").isEqualTo(actual.getCentro()))
            .satisfies(e ->
                assertThat(e.getFechahora())
                    .as("check fechahora")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getFechahora())
            )
            .satisfies(e -> assertThat(e.getEstado()).as("check estado").isEqualTo(actual.getEstado()))
            .satisfies(e -> assertThat(e.getOrigen()).as("check origen").isEqualTo(actual.getOrigen()))
            .satisfies(e -> assertThat(e.getMotivo()).as("check motivo").isEqualTo(actual.getMotivo()))
            .satisfies(e -> assertThat(e.getFechaingreso()).as("check fechaingreso").isEqualTo(actual.getFechaingreso()))
            .satisfies(e -> assertThat(e.getNivelprioridad()).as("check nivelprioridad").isEqualTo(actual.getNivelprioridad()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgendamientoUpdatableRelationshipsEquals(Agendamiento expected, Agendamiento actual) {
        // empty method
    }
}
